"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.suite = void 0;
const composition_1 = require("@arrows/composition");
const benchmark_1 = require("benchmark");
const kleur = require("kleur");
const getSummary_1 = require("./internal/getSummary");
const suite = (name, ...entries) => __awaiter(void 0, void 0, void 0, function* () {
    const methods = entries.filter((entry) => entry instanceof Function);
    const configResult = entries.find((entry) => entry.name === 'config');
    const config = configResult ? configResult.entries : {};
    const unpackedMethods = yield Promise.all(methods.map((method) => method(config)));
    const suiteObj = new benchmark_1.Suite(name).on('start', () => {
        console.log(kleur.blue(`Running "${name}" suite...`));
    });
    const hasOnly = unpackedMethods.filter((fn) => fn.name === 'only').length > 0;
    const items = hasOnly
        ? unpackedMethods.filter((fn) => fn.name !== 'add')
        : unpackedMethods;
    return new Promise((resolve, reject) => {
        ;
        (0, composition_1.pipe)(...items)(suiteObj)
            .on('complete', (event) => { var _a; return resolve((0, getSummary_1.default)(event, (_a = config.minDisplayPrecision) !== null && _a !== void 0 ? _a : 0)); })
            .on('error', reject)
            .run();
    });
});
exports.suite = suite;
exports.default = suite;
